// variable
$lte8: false;
$bdWidth: 1px;
$columns: 12;         // 列数
$minSmWidth: 768px;   // sm断点
$minMdWidth: 992px;   // md断点
$minLgWidth: 1200px;  // lg断点
$container-sm: 750px; // sm container宽度
$container-md: 970px; // md container宽度
$container-lg: 1170px;// lg container宽度

// mixin
@mixin reset {
  margin: 0;
  padding: 0;
}
@mixin clearFix {
  content: "";
  display: table;
  clear: both;
}
@mixin col {
  position: relative;
  min-height: 1px;
  padding-right: 15px;
  padding-left: 15px;
  float: left;
  box-sizing: border-box;
}

@mixin createGrid( $de ) {
  @for $i from 1 through $columns {
    .col-#{$de}-#{$i} {
      width: (100% / 12 * $i);
    }
  }
}

%grid-column {
  position: relative;
  min-height: 1px;
  padding-right: 15px;
  padding-left: 15px;
  float: left;
  box-sizing: border-box;
}

@mixin gridColumn($de) {
  @for $i from 1 through $columns {
    .col-#{$de}-#{$i} {
      width: (100% / 12 * $i);
      @extend %grid-column;
    }
  }
}

// style part
html,body {
  @include reset;
}

.container {
  box-sizing: border-box;
  padding-left: 15px;
  padding-right: 15px;
  margin-left: auto;
  margin-right: auto;

  @media (min-width: $minSmWidth) {
    width: $container-sm;
  }
  @media (min-width: $minMdWidth) {
    width: $container-md;
  }
  @media (min-width: $minLgWidth) {
    width: $container-lg;
  }
}

.container:before,
.container:after {
  @include clearFix;
}
.row {
  box-sizing: border-box;
  margin-right: -15px;
  margin-left: -15px;
}
.row:before,
.row:after {
  @include clearFix;
}

@include gridColumn(xs);

@include gridColumn(sm);

@include gridColumn(md);

@include gridColumn(lg);

@media (max-width: ($minSmWidth - 1)) {
  @include createGrid(xs);
}
@media (min-width: $minSmWidth) and (max-width: ($minMdWidth - 1)) {
  @include createGrid(sm);
}
@media (min-width: $minMdWidth) and (max-width: ($minLgWidth - 1)) {
  @include createGrid(md);
}
@media (min-width: $minLgWidth) {
  @include createGrid(lg);
}